using System.Linq;
using System.Collections.Generic;
using System.Text;

namespace Azarashi.Utilities.Editor
{
    public static class EnumFileGenerator
    {
        readonly static string Tab = "\t";
        readonly static string NewLine = "\n";
        readonly static string Namespace = "#NAMESPACE#";
        readonly static string BeginOfNamespace = "namespace " + Namespace + NewLine + "{" + NewLine;
        readonly static string EndOfNamespace = "}" + NewLine;
        readonly static string Enum = "#ENUM#";
        readonly static string BeginOfEnum = "public enum " + Enum + NewLine + "{" + NewLine;
        readonly static string EndOfEnum = "}" + NewLine;
        readonly static string FlagsAttribute = "[System.Flags]" + NewLine;
        readonly static string Summary = "#SUMMARY#";
        readonly static string SummaryBlock = "/// <summary>" + NewLine + "/// #SUMMARY#" + NewLine + "/// </summary>" + NewLine;
        readonly static string Item = "#ITEM#";
        readonly static string Index = "#INDEX#";
        readonly static string ItemBock = Item + " = " + Index + "," + NewLine;

        readonly static string Comment = "// This file is auto-generated by EnumFIleGenerator." + NewLine
                                        + "// If you change this file without a correct procedure," +NewLine
                                        + "// the integrity between source and this file may be destroyed." + NewLine
                                        + NewLine + NewLine;


        public static string Generate(string name, IEnumerable<string> items, string summary = null, string nameSpace = null, bool isFlags = false)
        {
            StringBuilder builder = new StringBuilder();

            //Item
            int index = 0;
            foreach (var x in items.Where(x => !string.IsNullOrEmpty(x)))
            {
                builder.Append(ItemBock);
                builder.Replace(Item, x);
                builder.Replace(Index, index.ToString());
                index++;
            }
            builder.Remove(builder.Length - 2, 1);  //最後のカンマを削除

            //Enum
            Indent(builder);
            builder.Insert(0, BeginOfEnum);
            builder.Append(EndOfEnum);
            builder.Replace(Enum, name);

            //Attribute
            if (isFlags)
                builder.Insert(0, FlagsAttribute);

            //Summary
            if (!string.IsNullOrEmpty(summary))
            {
                builder.Insert(0, SummaryBlock);
                builder.Replace(Summary, summary);
            }

            //Namespace
            if (!string.IsNullOrEmpty(nameSpace))
            {
                Indent(builder);
                builder.Insert(0, BeginOfNamespace);
                builder.Append(EndOfNamespace);
                builder.Replace(Namespace, nameSpace);
            }

            builder.Insert(0, Comment);

            return builder.ToString();
        }

        private static void Indent(StringBuilder builder)
        {
            //最後以外の改行の後ろにTabを追加
            builder.Replace(NewLine, NewLine + Tab);
            builder.Insert(0, Tab);
            builder.Remove(builder.Length - 1, 1);
        }
    }
}