using Azarashi.CerkeOnline.Domain.Entities.PublicDataType;
using static Azarashi.CerkeOnline.Domain.Entities.Terminologies;
using Azarashi.CerkeOnline.Domain.Entities.StandardizedRule.Pieces;
using Azarashi.CerkeOnline.Domain.Entities.StandardizedRule.PieceMoveAction;

namespace Azarashi.CerkeOnline.Domain.Entities.StandardizedRule
{
    internal static class BoardFactory
    {
        public static IBoard Create(IPlayer frontPlayer, IPlayer backPlayer)
        {
            IPiece tam = new Tam(PieceColor.Black, new PublicDataType.IntVector2(4, 4), null, null); //fieldEffectCheckerに渡すため別途生成

            FieldEffect[,] fieldEffectMap = new FieldEffect[,]
            {
                { FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal },
                { FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal },
                { FieldEffect.Normal, FieldEffect.Normal,  FieldEffect.Tarfe, FieldEffect.Normal, FieldEffect.Tammua, FieldEffect.Normal,  FieldEffect.Tarfe, FieldEffect.Normal, FieldEffect.Normal },
                { FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal,  FieldEffect.Tarfe, FieldEffect.Tammua,  FieldEffect.Tarfe, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal },
                { FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Tammua, FieldEffect.Tammua,  FieldEffect.Tanzo, FieldEffect.Tammua, FieldEffect.Tammua, FieldEffect.Normal, FieldEffect.Normal },
                { FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal,  FieldEffect.Tarfe, FieldEffect.Tammua,  FieldEffect.Tarfe, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal },
                { FieldEffect.Normal, FieldEffect.Normal,  FieldEffect.Tarfe, FieldEffect.Normal, FieldEffect.Tammua, FieldEffect.Normal,  FieldEffect.Tarfe, FieldEffect.Normal, FieldEffect.Normal },
                { FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal },
                { FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal, FieldEffect.Normal },
            };
            FieldEffectChecker fieldChecker = new StandardizedRule.FieldEffectChecker(new PositionArrayAccessor<FieldEffect>(fieldEffectMap), tam);

            IPiece[,] piece2DArray = new IPiece[,]
            {
                {     new Kua(PieceColor.Black, new PublicDataType.IntVector2(0,0), backPlayer, fieldChecker),       new Dodor(PieceColor.Black, new PublicDataType.IntVector2(1,0), backPlayer, fieldChecker),    new Vadyrd(PieceColor.Black, new PublicDataType.IntVector2(2,0), backPlayer, fieldChecker),      new Varxle(PieceColor.Black, new PublicDataType.IntVector2(3,0), backPlayer, fieldChecker),         new Ales(PieceColor.Red, new PublicDataType.IntVector2(4,0), backPlayer, fieldChecker),        new Varxle(PieceColor.Red, new PublicDataType.IntVector2(5,0), backPlayer, fieldChecker),      new Vadyrd(PieceColor.Red, new PublicDataType.IntVector2(6,0), backPlayer, fieldChecker),        new Dodor(PieceColor.Red, new PublicDataType.IntVector2(7,0), backPlayer, fieldChecker),         new Kua(PieceColor.Red, new PublicDataType.IntVector2(8,0), backPlayer, fieldChecker) },
                {    new Terlsk(PieceColor.Red, new PublicDataType.IntVector2(0,1), backPlayer, fieldChecker),       new Gustuer(PieceColor.Red, new PublicDataType.IntVector2(1,1), backPlayer, fieldChecker),                                                                           null,      new Stistyst(PieceColor.Red, new PublicDataType.IntVector2(3,1), backPlayer, fieldChecker),                                                                            null,    new Stistyst(PieceColor.Black, new PublicDataType.IntVector2(5,1), backPlayer, fieldChecker),                                                                           null,      new Gustuer(PieceColor.Red, new PublicDataType.IntVector2(7,1), backPlayer, fieldChecker),      new Terlsk(PieceColor.Red, new PublicDataType.IntVector2(8,1), backPlayer, fieldChecker) },
                {   new Elmer(PieceColor.Black, new PublicDataType.IntVector2(0,2), backPlayer, fieldChecker),         new Elmer(PieceColor.Red, new PublicDataType.IntVector2(1,2), backPlayer, fieldChecker),     new Elmer(PieceColor.Black, new PublicDataType.IntVector2(2,2), backPlayer, fieldChecker),         new Elmer(PieceColor.Red, new PublicDataType.IntVector2(3,2), backPlayer, fieldChecker),      new Felkana(PieceColor.Red, new PublicDataType.IntVector2(4,2), backPlayer, fieldChecker),         new Elmer(PieceColor.Red, new PublicDataType.IntVector2(5,2), backPlayer, fieldChecker),     new Elmer(PieceColor.Black, new PublicDataType.IntVector2(6,2), backPlayer, fieldChecker),        new Elmer(PieceColor.Red, new PublicDataType.IntVector2(7,2), backPlayer, fieldChecker),     new Elmer(PieceColor.Black, new PublicDataType.IntVector2(8,2), backPlayer, fieldChecker) },
                {                                                                         null,                                                                             null,                                                                           null,                                                                             null,                                                                            null,                                                                             null,                                                                           null,                                                                            null,                                                                           null },
                {                                                                         null,                                                                             null,                                                                           null,                                                                             null,                                                                             tam,                                                                             null,                                                                           null,                                                                            null,                                                                           null },
                {                                                                         null,                                                                             null,                                                                           null,                                                                             null,                                                                            null,                                                                             null,                                                                           null,                                                                            null,                                                                           null },
                {   new Elmer(PieceColor.Black, new PublicDataType.IntVector2(0,6), frontPlayer, fieldChecker),       new Elmer(PieceColor.Red, new PublicDataType.IntVector2(1,6), frontPlayer, fieldChecker),    new Elmer(PieceColor.Black, new PublicDataType.IntVector2(2,6), frontPlayer, fieldChecker),        new Elmer(PieceColor.Red, new PublicDataType.IntVector2(3,6), frontPlayer, fieldChecker),   new Felkana(PieceColor.Black, new PublicDataType.IntVector2(4,6), frontPlayer, fieldChecker),        new Elmer(PieceColor.Red, new PublicDataType.IntVector2(5,6), frontPlayer, fieldChecker),    new Elmer(PieceColor.Black, new PublicDataType.IntVector2(6,6), frontPlayer, fieldChecker),       new Elmer(PieceColor.Red, new PublicDataType.IntVector2(7,6), frontPlayer, fieldChecker),    new Elmer(PieceColor.Black, new PublicDataType.IntVector2(8,6), frontPlayer, fieldChecker) },
                {  new Terlsk(PieceColor.Black, new PublicDataType.IntVector2(0,7), frontPlayer, fieldChecker),   new Gustuer(PieceColor.Black, new PublicDataType.IntVector2(1,7), frontPlayer, fieldChecker),                                                                           null,   new Stistyst(PieceColor.Black, new PublicDataType.IntVector2(3,7), frontPlayer, fieldChecker),                                                                            null,     new Stistyst(PieceColor.Red, new PublicDataType.IntVector2(5,7), frontPlayer, fieldChecker),                                                                           null,     new Gustuer(PieceColor.Red, new PublicDataType.IntVector2(7,7), frontPlayer, fieldChecker),     new Terlsk(PieceColor.Red, new PublicDataType.IntVector2(8,7), frontPlayer, fieldChecker) },
                {       new Kua(PieceColor.Red, new PublicDataType.IntVector2(0,8), frontPlayer, fieldChecker),       new Dodor(PieceColor.Red, new PublicDataType.IntVector2(1,8), frontPlayer, fieldChecker),     new Vadyrd(PieceColor.Red, new PublicDataType.IntVector2(2,8), frontPlayer, fieldChecker),       new Varxle(PieceColor.Red, new PublicDataType.IntVector2(3,8), frontPlayer, fieldChecker),      new Ales(PieceColor.Black, new PublicDataType.IntVector2(4,8), frontPlayer, fieldChecker),     new Varxle(PieceColor.Black, new PublicDataType.IntVector2(5,8), frontPlayer, fieldChecker),   new Vadyrd(PieceColor.Black, new PublicDataType.IntVector2(6,8), frontPlayer, fieldChecker),     new Dodor(PieceColor.Black, new PublicDataType.IntVector2(7,8), frontPlayer, fieldChecker),      new Kua(PieceColor.Black, new PublicDataType.IntVector2(8,8), frontPlayer, fieldChecker) }
            };
            PositionArrayAccessor<IPiece> pieceMap = new PositionArrayAccessor<IPiece>(piece2DArray);

            IBoard board = new Board(pieceMap, fieldChecker, new PieceMoveActionFactory());
            return board;
        }

    }
}